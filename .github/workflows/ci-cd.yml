name: Build and Deploy to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggers

env:
  DOCKER_IMAGE: aravpatel2319/nodejs-mysql-app
  DOCKER_TAG: latest
  EKS_CLUSTER_NAME: nodejs-eks-cluster
  EKS_REGION: us-east-1
  NAMESPACE: nodejs-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.EKS_REGION }}
        
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.EKS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
    - name: Verify cluster connection
      run: |
        kubectl get nodes
        kubectl get namespaces
        
    - name: Deploy to EKS
      run: |
        # Restart deployment to pull new image
        kubectl rollout restart deployment/nodejs-app -n ${{ env.NAMESPACE }}
        
        # Wait for rollout to complete
        kubectl rollout status deployment/nodejs-app -n ${{ env.NAMESPACE }} --timeout=300s
        
        # Verify deployment
        kubectl get pods -n ${{ env.NAMESPACE }}
        kubectl get services -n ${{ env.NAMESPACE }}
        
    - name: Health check
      run: |
        # Get the load balancer URL
        LB_URL=$(kubectl get service nodejs-service -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        echo "Load Balancer URL: http://$LB_URL"
        
        # Wait a bit for the service to be ready
        sleep 30
        
        # Basic health check
        if curl -f "http://$LB_URL" > /dev/null 2>&1; then
          echo "✅ Application is healthy and accessible"
        else
          echo "❌ Application health check failed"
          exit 1
        fi
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment successful!"
          echo "Application is available at: http://$LB_URL"
        else
          echo "❌ Deployment failed!"
        fi
